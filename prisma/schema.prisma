// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id          String      @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  email       String      @unique
  password    String
  role        Role        @default(RECRUITER)
  skills      String[]
  bio         String?
  hourlyRate  Float?
  tokens      Token[]
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  interviews  Interview[] @relation("RecruiterInterviews")
  conducting  Interview[] @relation("InterviewerInterviews")
}

model Token {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  token     String
  user      User     @relation(fields: [userId], references: [id])
  userId    String   @db.ObjectId
  createdAt DateTime @default(now())
}

model Interview {
  id                String    @id @default(auto()) @map("_id") @db.ObjectId
  title             String
  description       String?
  candidateName     String
  candidateEmail    String
  candidateResume   String?
  skills            String[]
  status            Status    @default(PENDING)
  scheduledDate     DateTime?
  duration          Int       @default(60)
  recruiter         User      @relation("RecruiterInterviews", fields: [recruiterId], references: [id])
  recruiterId       String    @db.ObjectId
  interviewer       User?     @relation("InterviewerInterviews", fields: [interviewerId], references: [id])
  interviewerId     String?   @db.ObjectId
  feedback          Feedback?
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
}

model Feedback {
  id                    String     @id @default(auto()) @map("_id") @db.ObjectId
  technicalSkillsRating Int?
  technicalComments     String?
  communicationRating   Int?
  communicationComments String?
  problemSolvingRating  Int?
  problemSolvingComments String?
  overallRating         Int?
  strengths             String[]
  weaknesses            String[]
  recommendation        Recommendation?
  generalComments       String?
  interview             Interview  @relation(fields: [interviewId], references: [id])
  interviewId           String     @unique @db.ObjectId
  createdAt             DateTime   @default(now())
  updatedAt             DateTime   @updatedAt
}

enum Role {
  RECRUITER
  INTERVIEWER
  ADMIN
}

enum Status {
  PENDING
  SCHEDULED
  COMPLETED
  CANCELLED
}

enum Recommendation {
  HIRE
  CONSIDER
  REJECT
}